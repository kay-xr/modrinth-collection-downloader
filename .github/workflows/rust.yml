name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-gnu]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Windows dependencies
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: sudo apt-get update && sudo apt-get install -y mingw-w64

      - name: Get version from Cargo.toml
        id: version
        run: |
          version=$(grep '^version' Cargo.toml | head -n1 | sed 's/version = "\(.*\)"/\1/')
          echo "cargo_version=$version" >> $GITHUB_OUTPUT
          echo "RELEASE_TAG=v$version" >> $GITHUB_ENV

      - name: Check if release tag already exists
        id: tagcheck
        run: |
          if git ls-remote --exit-code --tags origin "refs/tags/v${{ steps.version.outputs.cargo_version }}"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build
        if: steps.tagcheck.outputs.exists == 'false'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        if: steps.tagcheck.outputs.exists == 'false'
        run: |
          BIN_NAME=$(basename $(pwd))
          BIN_PATH=target/${{ matrix.target }}/release
          EXT=".tar.gz"
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            EXT=".zip"
            zip -j "${BIN_NAME}-${{ matrix.target }}${EXT}" "${BIN_PATH}/${BIN_NAME}.exe"
          else
            tar -czvf "${BIN_NAME}-${{ matrix.target }}${EXT}" -C "${BIN_PATH}" "${BIN_NAME}"
          fi
          echo "ASSET_NAME=${BIN_NAME}-${{ matrix.target }}${EXT}" >> $GITHUB_ENV

      - name: Create GitHub Release
        if: steps.tagcheck.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          name: Release v${{ steps.version.outputs.cargo_version }}
          tag_name: v${{ steps.version.outputs.cargo_version }}
          draft: true
          files: ${{ env.ASSET_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}